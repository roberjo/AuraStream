[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aurastream"
version = "1.0.0"
description = "AuraStream - Real-time Sentiment Analysis API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AuraStream Team", email = "team@aurastream.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "boto3>=1.34.0,<2.0.0",
    "botocore>=1.34.0,<2.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "orjson>=3.9.0,<4.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "structlog>=23.2.0,<24.0.0",
    "cryptography>=41.0.0,<42.0.0",
    "awslambdaric>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<9.0.0",
    "pytest-cov>=4.1.0,<8.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-asyncio>=0.21.0,<2.0.0",
    "pytest-xdist>=3.5.0,<4.0.0",
    "pytest-timeout>=2.2.0,<3.0.0",
    "moto[all]>=5.0.0,<6.0.0",
    "black>=23.11.0,<24.0.0",
    "isort>=5.13.0,<6.0.0",
    "flake8>=6.1.0,<7.0.0",
    "mypy>=1.7.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "pip-audit>=2.6.0,<3.0.0",
    "safety>=2.3.0,<3.0.0",
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "ipython>=8.18.0,<9.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "notebook>=7.0.0,<8.0.0",
    "psutil>=5.9.0,<6.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
    "requests>=2.31.0,<3.0.0",
    "httpx>=0.25.0,<1.0.0",
    "pandas>=2.1.0,<3.0.0",
    "numpy>=1.25.0,<2.0.0",
    "build>=1.0.0,<2.0.0",
    "twine>=4.0.0,<5.0.0",
    "pip-tools>=7.3.0,<8.0.0",
]

[project.urls]
Homepage = "https://github.com/aurastream/aurastream"
Documentation = "https://aurastream.readthedocs.io"
Repository = "https://github.com/aurastream/aurastream.git"
Issues = "https://github.com/aurastream/aurastream/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "moto.*",
    "pytest.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "--cov-branch",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "aws: Tests that require AWS services",
    "security: Security-related tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:moto.*",
]
timeout = 300
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "*/settings/*",
    "*/manage.py",
    "*/conftest.py",
    "*/setup.py",
    "*/__init__.py",
]

[tool.coverage.report]
fail_under = 80
show_missing = true
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
    ": \\.\\.\\.",
    ": \\w+ = \\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"
title = "AuraStream Coverage Report"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
    ".pytest_cache",
    ".mypy_cache",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_scheme = "pep440"

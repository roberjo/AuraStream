name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: CI - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system deps (tfsec)
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          # Install tfsec
          curl -L "$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest | grep -o -E "https://.+?tfsec-linux-amd64" | head -n1)" -o tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Install runtime and dev dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # ensure some tools exist if not in requirements-dev
          pip install --upgrade pre-commit coverage pip-audit cfn-lint || true

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files

      - name: Lint (flake8)
        run: |
          if command -v flake8 >/dev/null 2>&1; then
            flake8 src || (echo 'flake8 failed' && exit 1)
          else
            echo "flake8 not installed; skipping"
          fi

      - name: Run tests with pytest and report coverage
        env:
          PYTHONWARNINGS: "ignore::pytest.PytestWarning"
        run: |
          pytest -q --maxfail=1 || (echo 'pytest failed' && exit 1)
          coverage run -m pytest || true
          coverage xml -i || true
          coverage report || true

      - name: Security scan - pip-audit
        run: |
          if command -v pip-audit >/dev/null 2>&1 && [ -f requirements.txt ]; then
            pip-audit --progress spinner --requirements requirements.txt
          elif command -v pip-audit >/dev/null 2>&1; then
            pip-audit --progress spinner
          else
            echo "pip-audit not available; skipping"
          fi

      - name: CloudFormation / SAM lint (cfn-lint)
        run: |
          if [ -f template.yaml ]; then
            cfn-lint template.yaml || (echo 'cfn-lint found issues' && exit 1)
          else
            echo "template.yaml not found; skipping cfn-lint"
          fi

      - name: Terraform security scan (tfsec)
        if: ${{ always() }}
        run: |
          if [ -d "./terraform" ]; then
            tfsec ./terraform || echo "tfsec found issues but continuing"
          else
            echo "terraform directory not found; skipping tfsec"
          fi
        continue-on-error: true
          